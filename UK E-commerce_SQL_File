--UK E-commerce Data Analysis

SELECT * FROM [UK E-commerce] LIMIT 10;

SELECT * 
FROM [UK E-commerce]
WHERE 
  Quantity > 0
  AND UnitPrice > 0
  AND CustomerID IS NOT NULL
  AND Description IS NOT NULL
  AND TRIM(Description) != '';
  
--1. Total quantity sold per product
SELECT Description, SUM(Quantity) AS TotalSold
FROM UK_Retail
GROUP BY Description
ORDER BY TotalSold DESC;

--2. Sales after a certain date
SELECT * 
FROM UK_Retail
WHERE InvoiceDate >= '2011-09-01'
ORDER BY InvoiceDate;

-- JOINS (Assume you split Customer Info into another table)
--(Create fake CustomerInfo table for join practice):
CREATE TABLE CustomerInfo AS
SELECT DISTINCT CustomerID, Country
FROM UK_Retail;

Select * from CustomerInfo;

-- 3. INNER JOIN to get country per invoice
SELECT r.InvoiceNo, r.CustomerID, c.Country, r.Quantity, r.UnitPrice
FROM UK_Retail r
INNER JOIN CustomerInfo c ON r.CustomerID = c.CustomerID
LIMIT 10;

--4. LEFT JOIN to find invoices with or without customer info
SELECT r.InvoiceNo, r.CustomerID, c.Country
FROM UK_Retail r
LEFT JOIN CustomerInfo c ON r.CustomerID = c.CustomerID
LIMIT 10;

-- c. Subqueries
--5. Customers who spent more than average
SELECT CustomerID, SUM(Quantity * UnitPrice) AS TotalSpent
FROM UK_Retail
GROUP BY CustomerID
HAVING TotalSpent > (
  SELECT AVG(Quantity * UnitPrice)
  FROM UK_Retail
);

--d. Aggregate functions (SUM, AVG, COUNT)
--6. Monthly revenue trend
SELECT strftime('%Y-%m', InvoiceDate) AS Month,
       SUM(Quantity * UnitPrice) AS Revenue
FROM UK_Retail
GROUP BY Month
ORDER BY Month;

--7. Average quantity per invoice
SELECT AVG(Quantity) AS AvgQuantity
FROM UK_Retail;

--e. Create views for analysis
--8. View for top-selling products
CREATE VIEW Top_Products AS
SELECT Description, SUM(Quantity) AS TotalSold
FROM UK_Retail
GROUP BY Description
ORDER BY TotalSold DESC
LIMIT 10;

SELECT * FROM Top_Products;

-- f. Optimize queries with indexes
-- 9. Create indexes for faster queries


CREATE INDEX idx_customer_id ON [UK E-commerce](CustomerID);
CREATE INDEX idx_invoice_date ON [UK E-commerce](InvoiceDate);



--10. Most frequent buying countries
SELECT Country, COUNT(DISTINCT CustomerID) AS TotalCustomers
FROM UK_Retail
GROUP BY Country
ORDER BY TotalCustomers DESC;


--11. Revenue per product per country
SELECT Country, Description, SUM(Quantity * UnitPrice) AS Revenue
FROM UK_Retail
GROUP BY Country, Description
ORDER BY Revenue DESC;





































































































